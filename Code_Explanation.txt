* what is JavaScript?
    JavaScript is a scripting or programming language that allow us to execute complex features on web pages and we are enable to create dynamically updating content,
    every time a page does more than just sit there and display static information for you to look at, display timely content updates, interactive maps, animated 2D/3D and etc.

    JavaScript is a lightweight interpreted programming language. the interpreted language is the language that the code is run from top to bottom and the result of running the code is immediately returned, we don't have to transform the code into different form before the browser runs it and the code is received in its programmer-friendly text form and processed directly from that,
    The web browser receives the JavaScript code in its original text form and runs the script from that,
    JavaScript interpreters actually use a technique called 'just-in-time-compiling' to improve performance,
    JavaScript source code gets collect into faster, binary format while the script is being used so that it can run as quickly as possible.

______________________________________________________

* what can JavaScript really do?
    the core client side JavaScript language consist of some common programming features that allow us to do things like:
        1.Store useful values inside variables.
        2.Operations on piece of text (known as 'string' in programming).
        3.Running code in response to certain events occurring on a web page.

    * The functionality built on top of the client-side in JavaScript language is called 'Application Programming Interfaces (APIs)' provides us with extra superpowers to use in JavaScript code.
        APIs are ready-made sets of code building blocks that allow a developer to execute programs that would be hard or impossible to execute.
        APIs has 2 categories:

    1. Browser APIs:
        Browser APIs are built into our web browser and are able to expose data from the surrounding computer environment or do other useful complex things like:
        I. The DOM (Document Object Model) API allow us to retouch HTML and CSS, creating and removing and changing HTML, dynamically applying new styles to our page,
            every time we see a popup window appear on a page or some new content displayed, that's the DOM action.
        II. The Geolocation API recover geographical information, this is how google maps is able to find our location on a map.
        III. The 'Canvas' and 'WebGL' APIs allow us to create animated 2D/3D graphics.
        IV. Audio and Video APIs will allow us to do really interesting things with multimedia.

    2. Third party APIs:
        Third party APIs are not built into browser by default and you have to grab their code and information from somewhere on the Web.

______________________________________________________

* JavaScript is dynamic language because it can change the type of variable.
    the word dynamic is used to describe both client-side JavaScript and server-side languages

* in JavaScript we don't have types of numbers like int, float and ... we have only 'number' type.

______________________________________________________

* Server-side vs Client-side
    client-side code is the code that is run on the user's computer, when web page is viewed the page's client-side code is downloaded the run and displayed by the browser,
    client-side JavaScript dynamically generates new content inside the browser one the client for example creating new HTML table and etc. , filling it with data requested from the server then displaying the table in a web page shown to the user.

    server-side code on the other hand is run on the server then its result are downloaded and displayed in the browser,
    server-side code dynamically generates new content on the server for example pulling database.
______________________________________________________

* 1. console.log():
    the console method log() outputs a message to the web console, 
    
    the message may be a single string or any one or more JavaScript objects.
______________________________________________________

* 2.Variables:
    A variable is a named location for storing a value and that value can be accessed through a predetermined name.
    we can use variable to store data temporary.
    variable are symbolic name of values.
    values of a variable can change.
    we will write a variable with 'let' or 'var'.

    name of variable:
        1.cannot be a reserved keyword.
        2.it should be meaningful.
        3.cannot start with a number.
        4.cannot contain space or hyphen (-).
        5.they are case-sensitive.
        6.A variable name must start with a letter, underscore (_), or dollar sign ($).

________________________________________________________

3. constant:
    The value of a constant cannot be changed through reassignment and it cannot be redeclare.
    
    if we don't want to change the value const will be our default choice.
________________________________________________________

5. math operators:
    expression in js is something that produces a value.
    
    comparison operator is a boolean it's true or false.

________________________________________________________

* 6. Data type:
    There are 6 basic data type in JavaScript which can be divided into three main categories:
    1.Primitive(primary)     2.composite(reference)      3.special data type

    1.primitive(primary): string, number and boolean.
    2.composite(reference): Object, array and function.
    3.special data type: undefined and null.
    default type of variables are undefined.

    string data type: 
        The string data type is used to represent a textual data and there are created using single or double quotes.
        string is a sequence of characters.

    number data type: 
        The number data type is used to represent positive and negative numbers with or without decimal place and includes some special values which is infinity, -infinity and NaN(not a number).

    boolean data type: 
        The boolean data type can hold only 2 values, true and false;

    undefined data type: 
        The undefined data type can only have the special value of undefined that means variable has not been assigned a value.

    null data type: 
        A null means that there is no value.

______________________________________________________

composite(reference):
    composite data type can hold collection of values and more complex entities.

* 7. Object:
    An object contains properties, defined as a key-value pair, a property key is always a string but the type can be anything.

    There are 2 ways 2 work with object properties:
    I. Dot notation.
    II. Bracket notation.

________________________________________________________

* 8.array:
    array is a reference type data and it's a type of object used for storing multiple values in single variable.
    
    each value in array has a numeric position known as its index and it may contain any data type nd the array index start from 0.
    
    length and type of array is dynamic.
    
    an array is a data structure that we use to represent a list of items.

______________________________________________________

* 9.Array Methods:
    1. toString():
        "toString()" methods converts an array to a string of array values.

    2. join(): 
        "join()" method are able to convert an array into a string, but in addition we can specify the separator. 

    3. pop(): 
        "pop()" method removes the last element of an array.

    4. push(): 
        "push()" method add new element at the end of an array.

    5. shift(): 
        "shift()" method is equivalent to pop() method but it's working on first element instead of the last.

    6. unshift(): 
        "unshift()" method add new elements at the beginning of an array.

    7. changing element: 
        we can change one of the elements of an array by using index number.

    8. length property: 
        it returns the length of an array.

    9. splice(): 
        "splice()" method can be used to add new elements to an array.
        the first parameter defines the position of the new element. (index[i])
        the second parameter defines how many parameters should be removed, we can remove elements without leaving hole in an array.
        this method returns an array with deleted items.

    10. concat(): 
        "concat()" method creates a new array by merging existing array and it can take strings as an arguments.

    11.slice(): 
        "slice()" method slices out a piece of an array into a new array.
        the first parameter is the start position or index. index[i]
        the second parameter is the finish position or index and it is not included.

    12. sort(): 
        "sort()" method can sort an array alphabetically.

    13. reverse(): 
        "reverse()" method sort an array in descending order.

    14. indexOf(): 
        "indexOf()" method searches an array for an element value and returns it position.
        lastindexOf(): it is the same as indexOf(), but it returns the position of the last occurrence of the specified element.

    15. include(): 
        "include()" method determines whether an array contains a specified element 

________________________________________________________

* 10. Functions:
    function is a set of statement that performs a task or calculate a value.

    function executes a block of code and since functions are objects it is possible to assign them to variable.

    basically it is a piece of code that do one or more actions

    parameter of a function is only meaningful in that function.

    if we don't give a value to our argument by default is undefined.

______________________________________________________

* 11. Ternary or conditional operators:
    The Ternary or conditional operator is the only JavaScript operator that takes three operands:
    a condition followed by a question mark (?), then an expression to execute if the condition is true followed by a colon (:), and finally the expression to execute if the condition is false,
    this operator is frequently used as a shortcut for the 'if' statement.

    condition ? expIfTrue : expIfFalse

______________________________________________________

* 12. Logical operators:
    Logical operators are typically used with boolean values,
    when they are, they return boolean value, however (&&) and (||) operators actually return the value of one of the specified operands,
    so if these operators are used with non-boolean values, they will return a non-boolean value.

    logical AND (&&): 
        returns TRUE if both operands are TRUE

    logical OR (||): 
        returns TRUE if one of the operands are TRUE

    NOT (!): 
        what ever we give to NOT operator it will give us the opposite.

______________________________________________________

* 13. non-boolean logical operators:
    the result of a logical expression is not necessarily true or false, that depends on value of operands we have.

    the true and false values of boolean are called 'truthy' and 'falsy'.

    in JavaScript, a truthy is a value that is considered true when encountered in a boolean context, All values are truthy unless they are defined as falsy,

    'falsy': undefined, null, 0, false, '', NaN

    As logical expressions are evaluated left to right, they are tested for possible 'short-circuit' evaluation using the following rules:
    (some falsy expression) && expr. -> is short-circuit evaluated to the falsy expression.
    (some truthy expression) || expr. -> is short-circuit evaluated to the truthy expression.

    short-circuit means that the exp. parts above are not evaluated.

______________________________________________________

* 14. Bitwise Operators:
    we use decimal system to represent numbers but in computer this numbers stored in binary format which is combination of 0 and 1.
    for example:
        1 = 00000001 -> 8 bit or 1 byte of information 
        2 = 00000010 -> 8 bit or 1 byte of information
    
    we have one real world example in our js file:
        so we will use one byte of information to determine what kind of permission user can have:
        Read, Write and Execute 
        00000111 -> because we have 3 permission the last 3 bits are 1, each one of them will represent one permission.
        Read permission -> 00000100
        Write permission -> 00000010
        Execute permission -> 00000001
    
    Note:
        with the bitwise 'OR' operator we can add permission,
        with the bitwise 'AND' operator we can check that we have that permission or not.

______________________________________________________

* 16. If...else:
    in JavaScript we have 2 conditional statement:
        1. if...else
        2. switch...case

    if (condition) {
        statement
    }
    else if (another condition) {
        statement
    }
    else if (yet another condition) {
        statement
    }
    else 
        statement

______________________________________________________

* 17. Switch...case:
    each case statement is used to compare the value of switch variable with something and it can be string, number and even boolean.

    Switch (variable) {
        case 'variable': console.log();
        break;
        ...
        default: console.log();
    }

______________________________________________________

* 18. For loop:
    sometimes we want repeat an action several time

    for (initialExpression; condition; incrementExpression) {
        statement
    }

______________________________________________________

* 19. While loop:
    The key difference between 'for loop' and 'while loop' is that in for loops the loop variable is a part of loop itself,
    but in while loop we have to declare it externally

    initialExpression;
    while (condition) {
        statement;
        incrementExpression;
    }

______________________________________________________

* 20. Do-While loop:
    The key difference between 'while loop' and 'do-while loop' is that if condition is false at least one time the statement will print it out.

    do {
        statement;
    } while (condition)

______________________________________________________

* 21. Infinite loop:
    Infinite loop execute infinitely or forever, so if we create one of this loops we are gonna crash the browser or computer.

______________________________________________________

* 22. For-in loop:
    we use for-in loop to iterate over the properties of an object.

______________________________________________________

* 23. For-of loop:
    we use for-of loop to iterate over elements or items in an array.

______________________________________________________

* 24. Break and Continue:
    with a break key word we will jump out of the loop,
    with a continue key word we will jump to next iteration.

______________________________________________________

* 25. Object basics:
    if we have properties that are highly related we want to collect them inside an object,
    Object-oriented Programming (OOP) -> OOP is a style of programming where we see a program as a collection of objects that talk to each other to perform some functionality,
    if a function is a part of an object we call that function a method.

______________________________________________________

* 26. Factory Function:
    Factory functions produce objects,
    In modern JavaScript if our key and the value are the same we can make our code shorter by removing the value and by simply adding the key.

______________________________________________________

* 27. Constructor Functions:
    Job of this function is to construct or create an object,
    In this function we have to use 'Pascal Notation', 
    Pascal Notation -> OneTwoThree
    In this function we also have to use 'this' key word,
    this -> this is a reference with an object which is executing this piece of code (this is an empty object)
    We also use 'new' operator and instead of returning object we use 'this' key word.

______________________________________________________

* 28. Dynamic Nature of Objects:
    Objects in JavaScript are dynamic which means once you create them we can always add new properties and remove the existence ones

______________________________________________________

* 29. Constructor Property:
    Every object in JavaScript has a property called Constructor and that references the functions that we use to construct or create that object,
    To look at the constructor of an object property on the console we will type the name of an object.constructor,
    JavaScript engine will translate object literal to construct like this:
        let x = {} -> let x = new Object()

______________________________________________________  

* 30. Functions are objects:
    As you can see in js file examples we have a function called Circle3(),
    This function is actually an object and we can see the methods and properties of this object on console.
    If we check the constructor of this object we will see a built in constructor called Function,
    When we are using a function with using that syntax internally JavaScript engine will use this Function constructor to create an object, you can see the first example in our js file.
    One of the methods is 'call' method and with this method we can call the function,
    As you can see the first argument of 'call' method is 'this' argument and we need to pass an empty object and 'this' will reference that empty object that we pass and after that we will pas arguments explicitly and in the example we have one argument called 'radius',
    the expression:
        Circle3.call({}, 1)
    is exactly like:
        const circle5 = new Circle3(1)
    Another method of this function is called 'apply' and with this we can call the function but instead of passing all the arguments explicitly we will pass them as an array and this is useful if we have already another array somewhere in application and want to pass that array as a second argument in apply method.

______________________________________________________

* 31. Value vs Reference:
    In javascript we have 2 categories of types 
        1. Value Types (primitive) -> Number, String, Boolean, Symbol, Undefined, Null
        2. Reference Types -> Object, Function, Array 
    When we use an object the object is not stored in that variable, that object stored somewhere in memory and address of that memory location stored inside that variable,
    so then when we copy it the address or the reference that we copied in other words there are pointing to the same object in memory and when we modified that object using either first variable or second,
    The changes immediately visible to the other variable.
    * Note:
        Primitive are copied by their value,
        Objects are copied by their reference.

______________________________________________________

* 32. Enumerating Properties of an Object:
    As we learned 'For-of' loop we can only use with iterables such as arrays and maps,
    so because object is not iterable we cannot use 'For-of' loop with an object,
    however we have this method called 'Object.keys[name of the object]', and with this method we can get all of the keys of our object and it will return an array,
    we have another method called 'Object.entries[name of the object]' and this method will return the value of our object as an array not as a string,
    and if we want to know that given object has given property or method we can use 'in' operator.

______________________________________________________

* 33. Cloning an Object:
    with this technic we can get all the properties of an object and copy them into another object,
    our first example is a old way of cloning an object,
    In modern javascript one of the ways is 'Object.assign({}, source object)', the first parameter is the empty object and on the second one we pass one or more source object, it will copy all the properties of the source code into empty or existence object,
    Another new way to clone an object is spread operator which is {...source object} and it will copy all the properties of a source code into an empty object.

______________________________________________________